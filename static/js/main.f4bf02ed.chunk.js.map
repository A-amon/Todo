{"version":3,"sources":["components/Container/index.js","components/ThemeSwitch/index.js","components/Card/index.js","components/Checkbox/index.js","components/CreateInput/index.js","services/form.js","context/types.js","context/reducer.js","context/index.js","services/utils.js","layouts/Header/index.js","context/actions.js","components/Task/index.js","containers/Tasks/index.js","layouts/Main/index.js","App/index.js","reportWebVitals.js","index.js"],"names":["Container","children","className","ThemeSwitch","onChange","type","name","id","Card","props","as","CardTag","defaultProps","Checkbox","checked","ariaHidden","filteredProps","CreateInput","onSubmit","useState","error","setError","task","setTask","resetFields","event","value","replace","length","preventDefault","placeholder","target","onBlur","initialState","todo","theme","reducer","state","action","types","todoContext","createContext","TodoProvider","useReducer","dispatch","Provider","getDoubleDigit","getCurrentDatetime","date","Date","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","second","getSeconds","Header","handleSubmit","completed","createdAt","addTodo","Consumer","currentTheme","switchTheme","Task","onUpdate","onDelete","onDrag","onDrop","isCompleted","setCompleted","taskId","taskDescId","checkboxId","useEffect","draggable","onDragOver","onDragStart","onClick","width","height","xmlns","fillRule","clipRule","d","Tasks","currentTab","setCurrentTab","useContext","filtered","setFiltered","taskListRef","useRef","dragId","setDragId","filterTodos","current","focus","filter","__todo","handleDrag","currentTarget","handleDrop","dropCreatedAt","split","dropTask","findIndex","dragCreatedAt","dragTask","reorderTodo","dragInd","dropInd","list","reordered","splice","ref","tabIndex","TransitionGroup","component","map","CSSTransition","timeout","classNames","forEach","Object","assign","updateTodo","deleteTodo","clearCompleted","Main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f4bf02ed.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\r\n\r\nconst Container = ({ children }) => {\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nContainer.propTypes = {\r\n\tchildren: PropTypes.oneOfType([\r\n\t\tPropTypes.node,\r\n\t\tPropTypes.arrayOf(PropTypes.node)\r\n\t])\r\n}\r\n\r\nexport default Container","import PropTypes from 'prop-types'\r\n\r\nconst ThemeSwitch = ({ onChange }) => {\r\n\treturn (\r\n\t\t<fieldset className=\"theme-switch\">\r\n\t\t\t<label className=\"theme-switch__label theme-switch__label--light\">\r\n\t\t\t\t<p className=\"sr-only\">\r\n\t\t\t\t\tLight mode\r\n\t\t\t\t</p>\r\n\t\t\t\t<input className=\"theme-switch__input\"\r\n\t\t\t\t\ttype=\"radio\"\r\n\t\t\t\t\tname=\"theme\"\r\n\t\t\t\t\tid=\"theme-light\"\r\n\t\t\t\t\tonChange={onChange} />\r\n\t\t\t</label>\r\n\t\t\t<label className=\"theme-switch__label theme-switch__label--dark\">\r\n\t\t\t\t<p className=\"sr-only\">\r\n\t\t\t\t\tDark mode\r\n\t\t\t\t</p>\r\n\t\t\t\t<input className=\"theme-switch__input\"\r\n\t\t\t\t\ttype=\"radio\"\r\n\t\t\t\t\tname=\"theme\"\r\n\t\t\t\t\tid=\"theme-dark\"\r\n\t\t\t\t\tonChange={onChange} />\r\n\t\t\t</label>\r\n\t\t</fieldset>\r\n\t)\r\n}\r\n\r\nThemeSwitch.propTypes = {\r\n\tonChange: PropTypes.func\r\n}\r\n\r\nexport default ThemeSwitch","import PropTypes from 'prop-types'\r\n\r\nconst Card = (props) => {\r\n\tconst { as, children, className } = props\r\n\tconst CardTag = as\r\n\r\n\treturn (\r\n\t\t<CardTag {...props} className={`card ${className || ''}`}>\r\n\t\t\t{\r\n\t\t\t\tchildren\r\n\t\t\t}\r\n\t\t</CardTag>\r\n\t)\r\n}\r\n\r\nCard.defaultProps = {\r\n\tas: 'li'\r\n}\r\n\r\nCard.propTypes = {\r\n\tas: PropTypes.string,\r\n\tchildren: PropTypes.oneOfType([\r\n\t\tPropTypes.node,\r\n\t\tPropTypes.arrayOf(PropTypes.node)\r\n\t]),\r\n\tclassName: PropTypes.string\r\n}\r\n\r\nexport default Card","import PropTypes from 'prop-types'\r\n\r\nconst Checkbox = (props) => {\r\n\tconst { name, id, checked, onChange, ariaHidden, filteredProps } = props\r\n\r\n\treturn (\r\n\t\t<div className=\"checkbox\" aria-hidden={ariaHidden}>\r\n\t\t\t<input className=\"checkbox__input\"\r\n\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\tname={name}\r\n\t\t\t\tid={id}\r\n\t\t\t\tchecked={checked}\r\n\t\t\t\tonChange={onChange}\r\n\t\t\t\t{...filteredProps}\r\n\t\t\t/>\r\n\t\t\t<span className=\"checkbox__image\"></span>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nCheckbox.propTypes = {\r\n\tname: PropTypes.string.isRequired,\r\n\tid: PropTypes.string.isRequired,\r\n\tchecked: PropTypes.bool,\r\n\tonChange: PropTypes.func\r\n}\r\n\r\nexport default Checkbox","import PropTypes from 'prop-types'\r\nimport { useState } from 'react'\r\nimport Card from '@components/Card'\r\nimport Checkbox from '@components/Checkbox'\r\nimport { isTextEmpty } from '@services/form'\r\n\r\nconst CreateInput = ({ onSubmit }) => {\r\n\tconst [error, setError] = useState('')\r\n\tconst [task, setTask] = useState('')\r\n\r\n\t/**\r\n\t * Validate submitted input value\r\n\t * Call onSubmit if valid\r\n\t * @param {object} event \r\n\t */\r\n\tconst validateSubmit = (event) => {\r\n\t\tsetError('')\r\n\t\tif (!isTextEmpty(task)) {\r\n\t\t\tonSubmit(event, task)\r\n\t\t\tresetFields()\r\n\t\t}\r\n\t\telse {\r\n\t\t\tevent.preventDefault()\r\n\t\t\tsetError('Your task is empty!')\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Reset checkbox and input field value\r\n\t */\r\n\tconst resetFields = () => {\r\n\t\tsetTask('')\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Card as=\"form\" className=\"create-input\" onSubmit={validateSubmit}>\r\n\t\t\t<Checkbox\r\n\t\t\t\tname=\"create-completed\"\r\n\t\t\t\tid=\"create-checkbox\"\r\n\t\t\t\tariaHidden=\"true\" />\r\n\t\t\t<input className=\"create-input__input\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tplaceholder=\"Create new input\"\r\n\t\t\t\tvalue={task}\r\n\t\t\t\taria-label=\"Create new input\"\r\n\t\t\t\taria-describedby=\"create-input__response\"\r\n\t\t\t\tonChange={event => setTask(event.target.value)}\r\n\t\t\t\tonBlur={() => setError('')} />\r\n\t\t\t<strong id=\"create-input__response\"\r\n\t\t\t\tclassName={`create-input__response ${error.length > 0 && \"show\"}`}>\r\n\t\t\t\t{error}\r\n\t\t\t</strong>\r\n\t\t</Card>\r\n\t)\r\n}\r\n\r\nCreateInput.propTypes = {\r\n\tonSubmit: PropTypes.func\r\n}\r\n\r\nexport default CreateInput","/**\r\n * Check if text is empty\r\n * @param {string} value \r\n * @returns {boolean}\r\n */\r\nconst isTextEmpty = (value) => {\r\n\treturn !value || value.replace(' ', '').length === 0\r\n}\r\n\r\nexport {\r\n\tisTextEmpty\r\n}","\r\nexport default {\r\n\tINIT_TODO: 'INIT_TODO',\r\n\tADD_TODO: 'ADD_TODO',\r\n\tUPDATE_TODO: 'UPDATE_TODO',\r\n\tDELETE_TODO: 'DELETE_TODO',\r\n\tCLEAR_COMPLETED: 'CLEAR_COMPLETED',\r\n\tSWITCH_THEME: 'SWITCH_THEME'\r\n}","import types from './types'\r\n\r\nconst initialState = {\r\n\ttodo: [],\r\n\ttheme: 'dark'\r\n}\r\n\r\nconst reducer = (state, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase types.SWITCH_THEME:\r\n\t\t\treturn { ...state, theme: action.theme }\r\n\t\tcase types.INIT_TODO:\r\n\t\tcase types.ADD_TODO:\r\n\t\tcase types.UPDATE_TODO:\r\n\t\tcase types.DELETE_TODO:\r\n\t\tcase types.CLEAR_COMPLETED:\r\n\t\t\treturn { ...state, todo: action.todo }\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nexport { reducer, initialState }","import PropTypes from 'prop-types'\r\nimport { createContext, useReducer } from 'react'\r\nimport { reducer, initialState } from './reducer'\r\n\r\nconst todoContext = createContext()\r\n\r\nconst TodoProvider = ({ children }) => {\r\n\tconst [state, dispatch] = useReducer(reducer, initialState)\r\n\r\n\treturn (\r\n\t\t<todoContext.Provider value={{ state, dispatch }}>\r\n\t\t\t{children}\r\n\t\t</todoContext.Provider>\r\n\t)\r\n}\r\n\r\nTodoProvider.propTypes = {\r\n\tchildren: PropTypes.oneOfType([\r\n\t\tPropTypes.node,\r\n\t\tPropTypes.arrayOf(PropTypes.node)\r\n\t])\r\n}\r\n\r\nexport { todoContext, TodoProvider }","/**\r\n * Get numbers < 10 in double digits\r\n * @param {number} value \r\n * @returns {string}\r\n */\r\nconst getDoubleDigit = (value) => {\r\n\tconst isLesserThanTen = value < 10\r\n\treturn `${isLesserThanTen ? '0' : ''}${value}`\r\n}\r\n\r\n/**\r\n * Get current datetime in {DDMMYYYY}T{HHMMSS} format\r\n * @returns {string}\r\n */\r\nconst getCurrentDatetime = () => {\r\n\tconst date = new Date()\r\n\tconst day = getDoubleDigit(date.getDate())\r\n\tconst month = getDoubleDigit(date.getMonth() + 1)\r\n\tconst year = getDoubleDigit(date.getFullYear())\r\n\tconst hour = getDoubleDigit(date.getHours())\r\n\tconst minute = getDoubleDigit(date.getMinutes())\r\n\tconst second = getDoubleDigit(date.getSeconds())\r\n\r\n\tconst datetime = `${day}${month}${year}T${hour}${minute}${second}`\r\n\treturn datetime\r\n}\r\n\r\nexport {\r\n\tgetDoubleDigit,\r\n\tgetCurrentDatetime\r\n}","import Container from '@components/Container'\r\nimport ThemeSwitch from '@components/ThemeSwitch'\r\nimport CreateInput from '@components/CreateInput'\r\nimport { todoContext } from '@context'\r\nimport { switchTheme, addTodo } from '@context/actions'\r\n\r\nconst Header = () => {\r\n\tconst handleSubmit = (event, todo, dispatch, task) => {\r\n\t\tevent.preventDefault()\r\n\t\taddTodo(todo, dispatch, task)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<todoContext.Consumer>\r\n\t\t\t{\r\n\t\t\t\t({ state, dispatch }) => (\r\n\t\t\t\t\t<header className=\"header\">\r\n\t\t\t\t\t\t<Container>\r\n\t\t\t\t\t\t\t<div className=\"header__wrapper\">\r\n\t\t\t\t\t\t\t\t<h1 className=\"header__title\">\r\n\t\t\t\t\t\t\t\t\tTodo\r\n\t\t\t\t\t\t\t\t</h1>\r\n\t\t\t\t\t\t\t\t<ThemeSwitch onChange={() => switchTheme(state.theme, dispatch)} />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<CreateInput onSubmit={(event, task) => handleSubmit(event, state.todo, dispatch, task)} />\r\n\t\t\t\t\t\t</Container>\r\n\t\t\t\t\t</header>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t</todoContext.Consumer>\r\n\t)\r\n}\r\n\r\nexport default Header","import types from './types'\r\nimport { getCurrentDatetime } from '@services/utils'\r\n\r\n/**\r\n * Toggle between dark and light\r\n * @param {string} currentTheme \r\n * @param {function} dispatch \r\n */\r\nconst switchTheme = (currentTheme, dispatch) => {\r\n\tdispatch({\r\n\t\ttype: types.SWITCH_THEME,\r\n\t\ttheme: currentTheme === 'light' ? 'dark' : 'light'\r\n\t})\r\n}\r\n\r\n/**\r\n * Add new item to todo list\r\n * @param {array} todo \r\n * @param {function} dispatch \r\n * @param {string} task \r\n */\r\nconst addTodo = (todo, dispatch, task) => {\r\n\tdispatch({\r\n\t\ttype: types.ADD_TODO,\r\n\t\ttodo: [...todo, { task, completed: false, createdAt: getCurrentDatetime() }]\r\n\t})\r\n}\r\n\r\n/**\r\n * Update todo item completion\r\n * @param {array} todo \r\n * @param {function} dispatch \r\n * @param {object} task \r\n */\r\nconst updateTodo = (todo, dispatch, task) => {\r\n\ttodo.forEach(__todo => {\r\n\t\tif (__todo.createdAt === task.createdAt) {\r\n\t\t\tObject.assign(__todo, task)\r\n\t\t}\r\n\t})\r\n\r\n\tdispatch({\r\n\t\ttype: types.UPDATE_TODO,\r\n\t\ttodo: [...todo]\r\n\t})\r\n}\r\n\r\n/**\r\n * Remove all completed todo item\r\n * @param {array} todo \r\n * @param {function} dispatch \r\n */\r\nconst clearCompleted = (todo, dispatch) => {\r\n\tdispatch({\r\n\t\ttype: types.CLEAR_COMPLETED,\r\n\t\ttodo: todo.filter(__todo => !__todo.completed)\r\n\t})\r\n}\r\n\r\n/**\r\n * Delete todo item from todo list\r\n * By createdAt value\r\n * @param {array} todo \r\n * @param {function} dispatch \r\n * @param {string} createdAt \r\n */\r\nconst deleteTodo = (todo, dispatch, createdAt) => {\r\n\tdispatch({\r\n\t\ttype: types.DELETE_TODO,\r\n\t\ttodo: todo.filter(__todo => __todo.createdAt !== createdAt)\r\n\t})\r\n}\r\n\r\nexport {\r\n\tswitchTheme,\r\n\taddTodo,\r\n\tupdateTodo,\r\n\tclearCompleted,\r\n\tdeleteTodo\r\n}","import PropTypes from 'prop-types'\r\nimport { useState, useEffect } from 'react'\r\nimport Card from '@components/Card'\r\nimport Checkbox from '@components/Checkbox'\r\n\r\nconst Task = ({ completed, task, createdAt, onUpdate, onDelete, onDrag, onDrop }) => {\r\n\tconst [isCompleted, setCompleted] = useState(false)\r\n\tconst taskId = `task-${createdAt}`\r\n\tconst taskDescId = `${taskId}__desc`\r\n\tconst checkboxId = `checkbox-${createdAt}`\r\n\r\n\t/**\r\n\t * Update isCompleted state\r\n\t * Based on completed prop\r\n\t */\r\n\tuseEffect(() => {\r\n\t\tcompleted && setCompleted(completed)\r\n\t}, [completed])\r\n\r\n\t/**\r\n\t * Handle checkbox update\r\n\t * Run onUpdate callback\r\n\t */\r\n\tconst handleChange = () => {\r\n\t\tsetCompleted(!isCompleted)\r\n\t\tonUpdate({ createdAt, completed: !isCompleted })\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Card className={`task ${isCompleted ? 'task--checked' : ''}`}\r\n\t\t\tid={taskId}\r\n\t\t\tdraggable={true}\r\n\t\t\tonDragOver={event => event.preventDefault()}\r\n\t\t\tonDragStart={onDrag}\r\n\t\t\tonDrop={onDrop}>\r\n\t\t\t<Checkbox checked={isCompleted}\r\n\t\t\t\taria-labelledby={taskDescId}\r\n\t\t\t\tonChange={handleChange}\r\n\t\t\t\tid={checkboxId}\r\n\t\t\t\tname=\"task-completion\"\r\n\t\t\t/>\r\n\t\t\t<p className=\"task__desc\" id={taskDescId}>\r\n\t\t\t\t{\r\n\t\t\t\t\ttask\r\n\t\t\t\t}\r\n\t\t\t</p>\r\n\t\t\t<button className=\"task__delete\" aria-label={`Delete ${task}`} onClick={onDelete}>\r\n\t\t\t\t<svg aria-hidden=\"true\" width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fillRule=\"evenodd\" clipRule=\"evenodd\"><path d=\"M12 11.293l10.293-10.293.707.707-10.293 10.293 10.293 10.293-.707.707-10.293-10.293-10.293 10.293-.707-.707 10.293-10.293-10.293-10.293.707-.707 10.293 10.293z\" /></svg>\r\n\t\t\t</button>\r\n\t\t</Card>\r\n\t)\r\n}\r\n\r\nTask.propTypes = {\r\n\tcompleted: PropTypes.bool.isRequired,\r\n\ttask: PropTypes.string.isRequired,\r\n\tcreatedAt: PropTypes.string.isRequired,\r\n\tonUpdate: PropTypes.func,\r\n\tonDelete: PropTypes.func\r\n}\r\n\r\nexport default Task","import { useState, useEffect, useContext, useRef } from 'react'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport { todoContext } from '@context'\r\nimport Task from '@components/Task'\r\nimport Card from '@components/Card'\r\nimport { updateTodo, clearCompleted, deleteTodo } from '@context/actions'\r\n\r\nconst Tasks = () => {\r\n\tconst [currentTab, setCurrentTab] = useState('All')\r\n\tconst { state, dispatch } = useContext(todoContext)\r\n\tconst [filtered, setFiltered] = useState([])\r\n\r\n\tconst taskListRef = useRef(null)\r\n\r\n\tconst [dragId, setDragId] = useState()\r\n\r\n\tuseEffect(() => {\r\n\t\tconst { todo } = state\r\n\r\n\t\tsetFiltered(filterTodos(currentTab, todo))\r\n\r\n\t\ttaskListRef.current.focus()\t// Focus on tasks list\r\n\t}, [state.todo, currentTab])\r\n\r\n\t/**\r\n\t * Filter todo items\r\n\t * By current tab\r\n\t * @param {string} currentTab \r\n\t * @param {array} todo \r\n\t * @returns {array}\r\n\t */\r\n\tconst filterTodos = (currentTab, todo) => {\r\n\t\tlet filtered = [...todo]\r\n\r\n\t\tif (currentTab !== 'All') {\r\n\t\t\tfiltered = filtered.filter(__todo =>\r\n\t\t\t\tcurrentTab === 'Completed' ? __todo.completed : !__todo.completed\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\treturn filtered\r\n\t}\r\n\r\n\t/**\r\n\t * Handle task drag event\r\n\t * @param {object} event \r\n\t */\r\n\tconst handleDrag = (event) => {\r\n\t\tsetDragId(event.currentTarget.id)\r\n\t}\r\n\r\n\t/**\r\n\t * Handle task drop event\r\n\t * @param {object} event \r\n\t */\r\n\tconst handleDrop = (event) => {\r\n\t\tconst dropId = event.currentTarget.id\r\n\t\tconst dropCreatedAt = dropId.split('-')[1]\r\n\t\tconst dropTask = filtered.findIndex(__todo => __todo.createdAt === dropCreatedAt)\r\n\r\n\t\tconst dragCreatedAt = dragId.split('-')[1]\r\n\t\tconst dragTask = filtered.findIndex(__todo => __todo.createdAt === dragCreatedAt)\r\n\r\n\t\tsetFiltered(reorderTodo(dragTask, dropTask, filtered))\r\n\t}\r\n\r\n\t/**\r\n\t * Reorder list items\r\n\t * @param {number} dragInd \r\n\t * @param {number} dropInd \r\n\t * @param {number} todo \r\n\t * @returns \r\n\t */\r\n\tconst reorderTodo = (dragInd, dropInd, list) => {\r\n\t\tconst reordered = [...list]\r\n\r\n\t\t/**\r\n\t\t * Move dragged item to above drop area\r\n\t\t * Remove original dragged item\r\n\t\t */\r\n\t\tif (dropInd < dragInd) {\r\n\t\t\treordered.splice(dropInd, 0, list[dragInd])\r\n\t\t\treordered.splice(dragInd + 1, 1)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Move dragged item to below drop area\r\n\t\t * Remove original dragged item\r\n\t\t */\r\n\t\telse if (dropInd > dragInd) {\r\n\t\t\treordered.splice(dropInd + 1, 0, list[dragInd])\r\n\t\t\treordered.splice(dragInd, 1)\r\n\t\t}\r\n\r\n\t\treturn reordered\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Card as=\"div\" className=\"tasks__container\">\r\n\t\t\t<ul className=\"tasks\" aria-describedby=\"tasks__none\" ref={taskListRef} tabIndex=\"-1\">\r\n\t\t\t\t<TransitionGroup component={null}>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfiltered\r\n\t\t\t\t\t\t\t.map(todo => (\r\n\t\t\t\t\t\t\t\t<CSSTransition key={todo.createdAt} timeout={200} classNames='task'>\r\n\t\t\t\t\t\t\t\t\t<Task onUpdate={task => updateTodo(state.todo, dispatch, task)}\r\n\t\t\t\t\t\t\t\t\t\tonDelete={() => deleteTodo(state.todo, dispatch, todo.createdAt)}\r\n\t\t\t\t\t\t\t\t\t\tonDrag={handleDrag}\r\n\t\t\t\t\t\t\t\t\t\tonDrop={handleDrop}\r\n\t\t\t\t\t\t\t\t\t\t{...todo}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</CSSTransition>\r\n\t\t\t\t\t\t\t))\r\n\t\t\t\t\t}\r\n\t\t\t\t</TransitionGroup>\r\n\t\t\t</ul>\r\n\t\t\t{\r\n\t\t\t\tfiltered.length === 0 && (\r\n\t\t\t\t\t<Card as=\"div\" className=\"tasks__none\" id=\"tasks__none\">\r\n\t\t\t\t\t\tNo tasks here\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\t<Card as=\"div\" className=\"tasks__footer\">\r\n\t\t\t\t<p className=\"tasks__left\">\r\n\t\t\t\t\t{filtered.length} items left\r\n\t\t\t\t</p>\r\n\t\t\t\t<div className=\"tasks__tabs\">\r\n\t\t\t\t\t<button className={`tasks__tab ${currentTab === 'All' ? 'tasks__tab--current' : ''}`} onClick={() => setCurrentTab('All')}>\r\n\t\t\t\t\t\tAll\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button className={`tasks__tab ${currentTab === 'Active' ? 'tasks__tab--current' : ''}`} onClick={() => setCurrentTab('Active')}>\r\n\t\t\t\t\t\tActive\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button className={`tasks__tab ${currentTab === 'Completed' ? 'tasks__tab--current' : ''}`} onClick={() => setCurrentTab('Completed')}>\r\n\t\t\t\t\t\tCompleted\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<button className=\"tasks__clear\" onClick={() => clearCompleted(state.todo, dispatch)}>\r\n\t\t\t\t\tClear completed\r\n\t\t\t\t</button>\r\n\t\t\t</Card>\r\n\t\t</Card>\r\n\t)\r\n}\r\n\r\nexport default Tasks","import Container from '@components/Container'\r\nimport Tasks from \"@containers/Tasks\";\r\n\r\nconst Main = () => {\r\n\treturn (\r\n\t\t<main className=\"main\">\r\n\t\t\t<Container>\r\n\t\t\t\t<Tasks />\r\n\t\t\t</Container>\r\n\t\t</main>\r\n\t)\r\n}\r\n\r\nexport default Main","import Header from \"@layouts/Header\";\nimport Main from \"@layouts/Main\";\nimport { todoContext } from '@context'\n\nfunction App () {\n\treturn (\n\t\t<todoContext.Consumer>\n\t\t\t{\n\t\t\t\t({ state }) => (\n\t\t\t\t\t<div className={`app app--${state.theme}`}>\n\t\t\t\t\t\t<Header />\n\t\t\t\t\t\t<Main />\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\n\t\t</todoContext.Consumer>\n\t)\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/css/index.css';\nimport App from './App';\nimport { TodoProvider } from '@context'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<TodoProvider>\n\t\t\t<App />\n\t\t</TodoProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}